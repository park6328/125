<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>

<!DOCTYPE html>
<html lang="ko">

<!-- HEAD -->
<%@ include file="../includes/head.jsp"%>

<!--Dropzone [ OPTIONAL ]-->
<script src="/resources/plugins/dropzone/dropzone.min.js"></script>

<title>Page Template | moim@</title>
</head>
<!-- END HEAD -->

<body>
	<!--TIPS-->
	<!--You may remove all ID or Class names which contain "demo-", they are only used for demonstration. -->
	<div id="container" class="effect aside-float aside-bright mainnav-lg">

		<!-- HEADER-NAVBAR -->
		<%@ include file="../includes/header-navbar.jsp"%>
		<!-- END NAVBAR -->

		<!-- BOXED -->
		<div class="boxed">

			<!-- MAIN-NAV -->
			<%@ include file="../includes/main-nav.jsp"%>
			<!-- END MAIN-NAV -->

			<!-- ASIDE -->
			<%-- <%@ include file="includes/aside.jsp" %> --%>
			<!-- END ASIDE -->
			



			<!--CONTENT CONTAINER-->
			<!--===================================================-->
			<div id="content-container">

				<!--Page Title-->
				<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<div id="page-title">
					<h1 class="page-header text-overflow">마이페이지</h1>
				</div>
				<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
				<!--End page title-->

				<!--Page content-->
				<!--===================================================-->
				<div id="page-content">
						<div class="row">
					    <div class="col-lg-6">
					        <div class="panel">
					            <div class="panel-heading">
					                <h3 class="panel-title">회원정보수정</h3>
					            </div>
					            <!-- BASIC FORM ELEMENTS -->
					            <!--===================================================-->
					            <form class="panel-body form-horizontal form-padding dropzone" action="/mypage/edit" method="post"  id="userForm">
									 <!--  사진 -->
									<div class="form-group">
										<label class="col-md-3 control-label">사진</label>
										<div class="col-md-9">
											<!--Dropzonejs using Bootstrap theme-->
											<!--===================================================-->
											<p style="text-align: left; margin-bottom: 0; padding: 6px 12px;">프로필에 쓰일 사진을 선택해주세요.</p>
											
											<div class="bord-top pad-ver"
												style="border-top: none; text-align: left; padding: 6px 12px;">
												<!-- The fileinput-button span is used to style the file input field as button -->
												<span class="btn btn-success fileinput-button dz-clickable">
													<i class="fa fa-plus"></i> <span>사진선택</span>
												</span>
											</div>
											<div id="dz-previews"
												style="border-top: none; text-align: left; padding: 6px 12px;">
												<div id="dz-template" class="pad-top bord-top">
													<div class="media">
														<div class="media-body">
															<!--This is used as the file preview template-->
															<div class="media-block">
																<div class="media-left">
																	<img class="dz-img" data-dz-thumbnail>
																</div>
																<div class="media-body">
																	<p class="text-main text-bold mar-no text-overflow"
																		data-dz-name></p>
																	<span class="dz-error text-danger text-sm"
																		data-dz-errormessage></span>
																	<p class="text-sm" data-dz-size></p>
																	<div id="dz-total-progress" style="opacity: 0">
																		<div class="progress progress-xs active"
																			role="progressbar" aria-valuemin="0"
																			aria-valuemax="100" aria-valuenow="0">
																			<div class="progress-bar progress-bar-success"
																				style="width: 0%;" data-dz-uploadprogress></div>
																		</div>
																	</div>
																</div>
															</div>
														</div>
														<div class="media-right">
															<button data-dz-remove
																class="btn btn-xs btn-danger dz-cancel">
																<i class="demo-pli-cross"></i>
															</button>
														</div>
													</div>
												</div>
											</div>
											<!--===================================================-->
											<!--End Dropzonejs using Bootstrap theme-->
										</div>
									</div>

									<!--닉네임-->
					                <div class="form-group">
					                    <label class="col-md-3 control-label">닉네임</label>
					                    <div class="col-md-9">
					                    	<input type="text" id="memNickname" name="memNickname" class="form-control" >
					                    </div>
					                </div>
					                
					                <!--Email Input-->
					                <div class="form-group">
					                    <label class="col-md-3 control-label" for="demo-email-input">이메일</label>
					                    <div class="col-md-9">
					                        <input type="email" id="memEmail" name="memEmail" class="form-control" readOnly>
					                    </div>
					                </div>
					
					                <!-- 현재 비밀번호 -->
					                <div class="form-group">
					                    <label class="col-md-3 control-label" for="demo-text-input">기존 비밀번호</label>
					                    <div class="col-md-9">
					                        <input type="password" id="memPassword" class="form-control" placeholder="Text" >
					                        <small class="help-block"></small>
					                    </div>
					                </div>
					                
					                 <!-- 신규 비밀번호 -->
					                <div class="form-group">
					                    <label class="col-md-3 control-label" for="demo-text-input">신규비밀 번호</label>
					                    <div class="col-md-9">
					                        <input type="password" id="newPassword" class="form-control" placeholder="Text" >
					                    </div>
					                </div>
					                
					                 <!-- 신규 비밀번호 확인 -->
					                <div class="form-group">
					                    <label class="col-md-3 control-label" for="demo-text-input">비밀번호 다시 입력확인</label>
					                    <div class="col-md-9">
					                        <input type="password" id="newPasswordCheck" class="form-control" placeholder="Text" >
					                        <small id="passMsg" class="help-block">This is a help text</small>
					                        <button class="btn btn-success" type="button" onclick="changePassword();">비밀번호 변경</button>
					                    </div>
					                </div>
					
					                <!--생일-->
					                <div class="form-group">
					                    <label class="col-md-3 control-label" for="demo-readonly-input">생일</label>
					                    <div class="col-md-9">
					                        <input type="text" id="memBirthday" name="memBirthday" class="form-control" placeholder="숫자 8자리 YYYYMMDD ex)19910215"  >
					                    </div>
					                </div>
									
					                <!-- 성별 -->
					             	<div class="form-group pad-ver">
					                    <label class="col-md-3 control-label">성별</label>
					                    <div class="col-md-9">
					                        <div>
					                            <input class="magic-radio" type="radio" name="memGender" value="M" id="mem">
					                            <label for="mem">남성</label>
					                        </div>
					                        <div>
					                            <input class="magic-radio" type="radio" name="memGender" value="W" id="women">
					                            <label for="women">여성</label>
					                        </div>
					                    </div>
					                </div>
									
									<!-- 지역 -->
					                <div class="form-group">
					                    <label class="col-md-3 control-label" for="demo-password-input">관심지역</label>
					                    <div class="col-md-9">
					                        <input type="text" id="memArea" name="memArea" class="form-control" >
					                    </div>
					                </div>
					                
					                <!-- 관심사1 -->
					             	<div class="form-group pad-ver" >
					                    <label class="col-md-3 control-label">관심사1</label>
					                    <div class="col-md-9">
					                       <div class="radio interest" id="interest1">
					                           
					                        </div>
					                    </div> 
					                </div>
					                
					                <!-- 관심사2 -->
					             	<div class="form-group pad-ver">
					                    <label class="col-md-3 control-label">관심사2</label>
					                    <div class="col-md-9">
					                        <div class="radio interest" id="interest2">
					                            
					                        </div>
					                    </div> 
					                </div>
									
									<!-- 관심사3 -->
					             	<div class="form-group pad-ver">
					                    <label class="col-md-3 control-label">관심사3</label>
					                    <div class="col-md-9">
					                        <div class="radio interest" id="interest3">
					                          
					                        </div>
					                    </div>
					                </div>
					                
					               <div class="panel-footer text-right">
					                    	<button class="btn btn-success" type="button" onclick="checkAndsubmit();">수정완료</button>
					               </div>
					            </form>
					            <!--===================================================-->
					            <!-- END BASIC FORM ELEMENTS -->
					
					
					        </div>
					    </div>
					


				</div>
				<!--===================================================-->
				<!--End page content-->


			</div>
			<!--===================================================-->
			<!--END CONTENT CONTAINER-->
			<button type="button" id="btnUpload">클릭 </button>


		</div>
		<!-- END BOXED -->

		<!-- FOOTER -->
		<%@ include file="../includes/footer.jsp"%>
		<!-- END FOOTER -->

	</div>
	<!-- END CONTAINER -->
	
<script>

$(document).ready(function(){  //onload 함수
	// getInterest();
	 getMyInfo();
	
	 $('#newPassword').blur(newPasswordCheck);		// 이벤트등록 (신규비밀 번호)
	 $('#newPasswordCheck').blur(rePasswordCheck);	// 이벤트등록 (비밀번호 다시 입력확인)
});

function changePassword(){
	
	// 유효성 검사 : 신규비밀번호, 비밀번호 확인
	if(newPasswordCheck()){ return; }
	if(rePasswordCheck()){ return; }
	
	// 기존비밀번호 검사
	if(passwordCheck()){ return; }
	
	// 기존비밀번호 서버로 보내서 비밀번호가 맞는지 확인
	let memPassword = $('#memPassword').val();
	let memEmail = $('#memEmail').val()
	
	let url = '/user/checkPassword';
	let data = { memPassword : memPassword, 
				memEmail : memEmail   
				};
	let error= "에러가 발생하였습니다. 관리자에게 문의하세요"

	// ajax로 데이터 전송
	let resultData = callAjax(data, url, error)
	
	// 결과값 확인
	if(resultData.msgCode == 0){
		$('#passMsg').text("비밀번호가 다름니다.").css('color','red');
		return;
	}
	
	// 비밀번호 변경
	memPassword = $('#newPassword').val()
	url = '/user/changePassword';
	data = { memPassword : memPassword, 
				memEmail : memEmail   
		};
	
	// ajax로 데이터 전송 - 비밀번호 변경
	resultData = callAjax(data, url, error);
	
	// 결과값 확인
	alert(resultData.msg);
	
	// 기존 신규 다 비우기
	$('#memPassword').val('');
	$('#newPasswordCheck').val('');
	$('#newPassword').val('');

}

function checkAndsubmit(){
	// 정규식(길이,패턴) 체크 ~ 이것도 나중에
	// 1) 생일 유효성 체크(길이, 숫자만)
	
	// 전송
	if (confirm("회원정보를 수정하시겠습니까?")) {	$('#userForm').submit() }	
	
}

//기존 비밀번호 유효성 검사
function passwordCheck(){
	if(nul_chk($('#memPassword'),8,15)){
		$('#passMsg').text("기존 패스워드는 8자이상 15자 미만입니다").css('color','red');
		alert("dfu")
		return true;
	}else{
		$('#passMsg').text("").css('color','black');
	}
}

// 신규 패스워드 검사
function newPasswordCheck(){
	if(nul_chk($('#newPassword'), 8,15)){	// 빈문자,길이체크:  nul_chk("검사할 객체, 최소길이, 최대길이") 리턴 true and false
		$('#passMsg').text("신규 패스워드는 8자이상 15자 미만입니다").css('color','red');
		return true;
	}else{
		$('#passMsg').text("").css('color','black');
		return false;
	}
}

//신규 패스워드 확인 검사
function rePasswordCheck(){
	 let newPassword = $('#newPassword').val()
	 let rePassword = $('#newPasswordCheck').val()
	 
	 if(newPasswordCheck()){ return false; }
	 
	 if(newPassword != rePassword){
		 $('#passMsg').text("신규 비밀번호가 일치하지 않습니다.").css('color','red');
		 return true;
	 }else{
		 $('#passMsg').text("").css('color','black');
	 }
}

// 개인정보를 갖고와서 찍기
function getMyInfo(){
	
	let data = null;
	let url = "/mypage/selectUser";
	let error="에러가발생했습니다. 다시시작해 주세요";
	
	let resultData = callAjax(data, url, error);
	
	console.log(resultData);
	
	// 여기서 부터 화면에 찍는로직
	let user = resultData.user;	// user 정보만 갖고오고
	
	var array = new Array();	// arrayList생성 (키만 담을ㄹ고)
	for (var key in user) {
	      $('#'+key).val(user[key]);	
	      
	      if(key == "memGender"){
	    	  $('input:radio[name="memGender"][value="'+user[key]+'"]').prop('checked', true);
	      
	      }else if(key == "memInt1"){
	    	  $('input:radio[name="memInt1"][value="'+user[key]+'"]').prop('checked', true);
	    	  
	      }else if(key == "memInt2"){
	    	  $('input:radio[name="memInt2"][value="'+user[key]+'"]').prop('checked', true);
	    	  
	      }else if(key == "memInt3"){
	    	  $('input:radio[name="memInt3"][value="'+user[key]+'"]').prop('checked', true);
	      }else if(key == "memPhoto"){
	    	  // 자바스크립에서 contextPath(localhost:8080/moimat 구하는 방법 : 위와 동일
	    	 // var ctx = window.location.pathname.substring(0, window.location.pathname.indexOf("/",2));
	    		//alert(window.location.pathname);
	    	  $('#memPhoto').attr("src", '${pageContext.request.contextPath}' + user[key]);
	      }
	}
}

// 관심사 코드를 갖고온다(문항 동적으로 생성)
function getInterest(){
	
	let data = null;
	let url = "/auth/codeList";
	let error="에러가발생했습니다. 다시시작해 주세요";
	
	let resultData = callAjax(data, url, error);
	let codeList = resultData.codeList
	let interests = $('.interest');
	
	for(let i=0; i<interests.length; i++){
		let str='';
		for(let j=0; j<codeList.length; j++){
			str += '<input  class="magic-radio" type="radio" name="memInt'+(i+1)+'" value="'+codeList[j].intId+'"'
					+'id="interest'+(i+1)+'_'+(j+1)+'"' +'checked>'
					+ '<label for="interest'+(i+1)+'_'+(j+1)+'">'+codeList[j].intName+'</label>';	
		}
		console.log(str);
		
		$('#interest'+(i+1)).append(str);
	}
	
}



var myDropzone = new Dropzone("#userForm", { // Make the whole body a dropzone
    	clickable: ".fileinput-button", // Define the element that should be used as click trigger to select files.  
	});
});

//var myDropzone = new DropZone("#btnUpload", { 
//	url:"/mypage/edit"});

// TODO: 메서드 전체적으로 고쳐야함
//			- required upload url.
/***** FILE UPLOAD USING DROPZONE.JS *****/
/*
var previewNode = document.querySelector("#dz-template");
previewNode.id = "";
var previewTemplate = previewNode.parentNode.innerHTML;
previewNode.parentNode.removeChild(previewNode);

var uplodaBtn = $('#dz-upload-btn'); //TODO : 필요없음
var removeBtn = $('#dz-remove-btn'); //TODO : 필요없음

var myDropzone = new Dropzone("#userForm", { // Make the whole body a dropzone
	url: "/mypage/edit", // Set the url
    thumbnailWidth: 50,
    thumbnailHeight: 50,
    parallelUploads: 20,
    previewTemplate: previewTemplate,
    //autoQueue: false, // Make sure the files aren't queued until manually added
    previewsContainer: "#dz-previews", // Define the container to display the previews
    clickable: ".fileinput-button", // Define the element that should be used as click trigger to select files.
    maxFiles: 1,
    //acceptedFiles: "image/jpeg,image/png,image/gif",
    dictMaxFilesExceeded: '프로필 사진은 한장만 가능합니다.',
    init: function() {
    	var submitButton = document.querySelector("#btnUpload")
        myDropzone = this;
        
    	alert("우우"); 	
    	
    	
        submitButton.addEventListener("click", function() {
             alert("아아"); 	

           //Check if file is selected for upload 
          if (myDropzone.getUploadingFiles().length === 0 && myDropzone.getQueuedFiles().length === 0) {      
            alert('No file selected for upload');  
            return false;
          }
          else {
            // Remove event listener and start processing  
            myDropzone.removeEventListeners();
            
          }
           
        });
    }
});
*/

/*
myDropzone.on("addedfile", function(file) {
	alert("added file");
    uplodaBtn.prop('disabled', true); 	//TODO: 필요없음
    removeBtn.prop('disabled', false); 	//TODO: 필요없음
    myDropzone.processQueue();
    alert("프라세스");
	console.log(myDropzone.getUploadingFiles())
	console.log(Dropzone.QUEUED);
	console.log(Dropzone.options.parallelUploads)
	console.log($(this).get(0))
	var dropzone = $(this).get(0);
    dropzone.processQueue();
});

// Update the total progress bar
myDropzone.on("totaluploadprogress", function(progress) {
	
    $("#dz-total-progress .progress-bar").css({'width' : progress + "%"});
    alert(2)
});

myDropzone.on("sending", function(file) {
	 alert(3)
    // Show the total progress bar when upload starts
    document.querySelector("#dz-total-progress").style.opacity = "1";
});

// Hide the total progress bar when nothing's uploading anymore
myDropzone.on("queuecomplete", function(progress) {
	 alert(4)
    document.querySelector("#dz-total-progress").style.opacity = "0";
});


// Setup the buttons for all transfers
uplodaBtn.on('click', function() {
	 alert(5)
    //Upload all files
    //myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED));
});

removeBtn.on('click', function() {
	 alert(6)
    myDropzone.removeAllFiles(true);
    uplodaBtn.prop('disabled', true);
    removeBtn.prop('disabled', true);
});
*/
/***** END FILE UPLOAD *****/



//ajax 호출 코드
function callAjax(data, url, error) {

	let resultData = null;

	$.ajax({
		type : "POST",
		url : url,
		data : data,
		dataType : "json",
		contentType : "application/x-www-form-urlencoded; charset=UTF-8",
		async : false,
		success : function(data, status, xhr) {
			console.log(data);
			resultData = data;
		},
		error : function(jqXHR, textStatus, errorThrown) {
			alert(error);
		}
	});

	return resultData
}

//문자 공백 없애기
function is_trim(str){
	var strValue = new String(str)
	return strValue.replace(/(^ +)|( +$)/g,'')
}

//널 또는 빈문자열 및 길이 체크
function nul_chk(obj, start,end){
	if(is_trim(obj.val()) == '' )
	{
		//obj.focus();
		return true;
	}else if(obj.val().length <start || obj.val().length > end ){
		//obj.focus();
		return true;
	}
	return false;
}
/*

Dropzone.options.userForm = {
		
 	    autoProcessQueue: false,
 	    clickable: ".fileinput-button",

	    init: function (e) {

	        var myDropzone = this;
		
	        alert("ㅜㅜㅜㅜ");
	        $('#btn_upload').on("click", function() {
	            myDropzone.processQueue(); // Tell Dropzone to process all queued files.
	        });

	        // Event to send your custom data to your server
	        myDropzone.on("sending", function(file, xhr, data) {

	            // First param is the variable name used server side
	            // Second param is the value, you can add what you what
	            // Here I added an input value
	            data.append("your_variable", $('#your_input').val());
	        });

	    } 
	};
*/
</script>	
	
	
</body>
</html>
============================================================================================

	Dropzone.options.myAwesomeDropzone = {
			
		    autoProcessQueue: false,

		    init: function (e) {

		        var myDropzone = this;

		        $('#btn_upload').on("click", function() {
		            myDropzone.processQueue(); // Tell Dropzone to process all queued files.
		        });

		        // Event to send your custom data to your server
		        myDropzone.on("sending", function(file, xhr, data) {

		            // First param is the variable name used server side
		            // Second param is the value, you can add what you what
		            // Here I added an input value
		            data.append("your_variable", $('#your_input').val());
		        });

		    }
		};
		=========================================================
				
				<c:set var="pre-fix" value="#" />
						<c:set var="cordinate" value="collapse" />
						
						<c:forEach var="name" items="${nameList}" varStatus="status">
	    					<div class="panel panel-default">
								<div class="panel-heading" role="tab" id="headingOne">
									<h4 class="panel-title">								
										<a role="button" data-toggle="collapse" data-parent="#accordion" href="${'#'}${cordinate}${status.count}" aria-expanded="true" aria-controls="collapseOne">
											ABCD
										</a>
									</h4>
								</div>
								
								<div id="${cordinate}${status.count}" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">
									<div class="panel-body">
										<p>ABCD</p>
									</div>
								</div>
							</div>
						</c:forEach>
==================================================================================================================


$(document).ready(function(){
    $("#job_id").on("change", function(){
    	
    	var val = $(this).val();
    	
     	var pre = $("#aaa").attr("href");
    	
     	console.log(pre.toString()  + val.toString());     	 
     	$("#aaa").attr("href",pre.toString()  + val.toString());     	
        console.log($(this).val());
       
       
    });
});
	
	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<property name="driverClassName" value="core.log.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:XE" />
		<property name="username" value="scott" />
		<property name="password" value="tiger" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/sqlmap/*.xml" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>	
	
	<!-- 	3번과 4번 방식을 사용하기 위한 방식임  -->
	<!-- 	Mapper Interface -->
	<mybatis-spring:scan base-package="edu.bit.ex.*"/> 
	
	=============================================================
	<bean id="student" class="edu.bit.ex.Student" >
		<property name="name" value="홍길동" />
		<property name="age" value="10" />
	</bean>
	
	<bean id="worker" class="edu.bit.ex.Worker" >
		<property name="name" value="홍길순" />
		<property name="age" value="35" />
		<property name="job" value="개발자" />
	</bean>
	
	<bean id="logAop" class="edu.bit.ex.LogAop" />
		
	<aop:config>
		<aop:aspect id="logger" ref="logAop">
			<aop:pointcut id="publicM" expression="within(edu.bit.ex.Student)"/>
			<aop:around pointcut-ref="publicM" method="loggerAop" />
		</aop:aspect>
	</aop:config>
		===============================================================================
		public Object loggerAop(ProceedingJoinPoint joinpoint) throws Throwable {
		String signatureStr = joinpoint.getSignature().toShortString();
		System.out.println( signatureStr + " is start.");
		
		long st = System.currentTimeMillis();
		
		try {
			Object obj = joinpoint.proceed();
			return obj;
		} finally {
		
			long et = System.currentTimeMillis();
			
			System.out.println( signatureStr + " is finished.");
			System.out.println( signatureStr + " 경과시간 : " + (et - st));
		}
		
	}
		==============================================================================
		<!-- Test Artifacts -->
		<dependency>
		    <groupId>org.springframework</groupId>
    		<artifactId>spring-test</artifactId>
    		<version>${org.springframework-version}</version>
		</dependency>
		
		<!-- AOP -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.7.4</version>
		</dependency>
		
		<dependency>
   			<groupId>cglib</groupId>
   			<artifactId>cglib</artifactId>
   			<version>2.2</version>
  		</dependency>
		
	========================================================================================
		// xml에 설정된 리소스참조
	//bean의 id가 uploadPath인 태그를 참조
	
	@Resource(name="uploadPath")
	String uploadPath;
	
	
	// url은 같지만 get방식으로 넘어옴
	@RequestMapping(value="/upload/uploadForm", method = RequestMethod.GET)
	public void uploadForm() {
		// upload/uploadForm.jsp로 포워딩
	}
	
	//업로드 버튼 => 임시디렉토리업로드 => 파일정보가 file에 저장 => 지정된 디렉토리에 저장
	@RequestMapping(value = "/upload/uploadForm", method = RequestMethod.POST)
	public ModelAndView uploadForm(MultipartFile file, ModelAndView mav) throws Exception{
		
		logger.info("파일이름:" + file.getOriginalFilename());
		String savedName = file.getOriginalFilename();
		
		logger.info("파일크기:" + file.getSize());
		logger.info("컨텐트타입:" + file.getContentType());
		
		savedName = uploadFile(savedName,file.getBytes());
		mav.setViewName("upload/uploadResult");
		mav.addObject("saveName",savedName);
		return mav; // uploadResult.jsp로 포워딩	
	}
	
	//파일이름이 중복되지 않도록 처리
	private String uploadFile(String originalName, byte[] fileData) throws Exception {
		
		//uuid 생성(Universal Unique IDentifier, 범용 고유 식별자 , 랜덤으로 코드를 만들어냄)
		UUID uid = UUID.randomUUID();
		String savedName = uid.toString() + "_" + originalName;
		File target = new File(uploadPath, savedName);
		
		//임시디렉토리에 저장된 업로드된 파일을 지정된 디렉 토리로 복사
		//FileCopyUtils.copy(바이트배열,파일객체)
		FileCopyUtils.copy(fileData, target);
		
		return savedName;
	}
	
	==========================================================================================
	<!-- MultipartResolver 설정 -->
    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="100000000" />
        <beans:property name="maxInMemorySize" value="100000000" />
    </beans:bean>
	
	<!-- 파일업로드를 위한 디렉토리 설정 -->
	
	<!-- String uploadPath = new String("e:/uplaod"); -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="d:/upload"/>
	</beans:bean>
===========================================================================================
		<!-- MultipartHttpServletRequset -->
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.4</version>
		</dependency>
		
		<!-- fileupload -->
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.2.2</version>
		</dependency>
		==================================
	<!-- 인터셉터 객체 생성 -->
	<beans:bean id="boardInterceptor" class="edu.bit.ex.interceptor.BoardInterceptor">
	</beans:bean>
	<!-- Interceptor 설정 -->
	<interceptors>
	    <interceptor>
	        <mapping path="/board/**"/>         
	       <!--  <exclude-mapping path="/resources/**"/> -->
	        <beans:ref bean="boardInterceptor"/>
	    </interceptor>
	</interceptors>
	
=====================================================================================
@Select("select * from login where id = #{id} and pw = #{pw}")
	public MemberVO logInMember(@Param("id") String id,@Param("pw") String pw);

-- 테이블 생성
create table login (
idx number(10) primary key,
id varchar2(20) not null,
pw varchar2(20) not null,
name varchar2(20) not null,
age number(4) not null,
email varchar2(50) not null
);

-- 시퀀스 생성
create SEQUENCE login_seq;

-- admin 1111 등록
insert into login values(login_seq.nextval, 'admin', '1111', 'admin', 30, 'admin@google.com');

commit;

-- 아이디 목록 확인
select * from login;
===========================================
		
		import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations= {"file:src/main/webapp/WEB-INF/spring/**/root-context.xml"})
		====================================================
		<dependency>
		    <groupId>org.springframework</groupId>
    		<artifactId>spring-test</artifactId>
    		<version>${org.springframework-version}</version>
		</dependency>
		=======================================================
	
	
	SELECT * FROM
	<![CDATA[
		SELECT * FROM
		(
	        SELECT
	            A.*,
	            ROWNUM AS RNUM,
	            COUNT(*) OVER() AS TOTCNT
	        FROM
	            (               
	             	select bId, bName, bTitle, bContent, bDate, bHit, bGroup, bStep, bIndent from mvc_board order by bGroup desc, bStep asc	
	            ) A
	    )WHERE RNUM >= #{startNum} AND RNUM <= #{endNum}
	]]>	
    ========================================================
     
     DECLARE
       v_cnt number := 100; 
	   BEGIN
	
       DBMS_OUTPUT.ENABLE; 
	
       WHILE v_cnt < 1000 LOOP 
	
            insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent)
            VALUES (mvc_board_seq.nextval, 'abcd', 'is title', 'is content', 0 , mvc_board_seq.currval, 0, 0);
	
           v_cnt := v_cnt+1; 
	
           EXIT WHEN v_cnt > 1000; 
	
       END LOOP; 
	
       DBMS_OUTPUT.PUT_LINE('데이터 입력 완료'); 
       DBMS_OUTPUT.PUT_LINE(v_cnt-100 || '개의 데이터가 입력되었습니다'); 
		
    END; 
commit;
		////////////////////////////////////////////////////////////////////////////////
		<c:if test="${pageMaker.prev}">
			<a href="list2${pageMaker.makeQuery(pageMaker.startPage - 1) }">«</a>
		</c:if>

		<c:forEach begin="${pageMaker.startPage }" end="${pageMaker.endPage }" var="idx">
		<%-- 	<c:out value="${pageMaker.cri.page == idx?'':''}" /> --%>
			<a href="list2${pageMaker.makeQuery(idx)}">${idx}</a>
		</c:forEach>
		
		<c:if test="${pageMaker.next && pageMaker.endPage > 0}">
			<a href="list2${pageMaker.makeQuery(pageMaker.endPage +1) }"> » </a>
		</c:if> <br>
	
	
	
	public String makeQuery(int page) {
		UriComponents uriComponentsBuilder = UriComponentsBuilder.newInstance().queryParam("page", page) // page = 3
				.queryParam("perPageNum", cri.getPerPageNum()) // page=3&perPageNum=10
				.build(); // ?page=3&perPageNum=10
		return uriComponentsBuilder.toUriString(); // ?page=3&perPageNum=10의 값을 리턴
	}


<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
  		<property name="mapperInterface" value="com.bit.mapper.IBoardMapper" />
  		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<insert id="insertBoard" parameterType="edu.bit.ex.vo.BoardVO" >
    	insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent) values (mvc_board_seq.nextval, #{bName}, #{bTitle}, #{bContent}, 0, mvc_board_seq.currval, 0, 0 )
	</insert>
	

1.컨트롤러(Controller) : 클라이언트에서 요청이 들어올 때, 
해당 요청을 수행할 비즈니스 로직을 제어하는 객체다. 

2.스프링에서는 컨트롤러에서 세부적으로 서비스 레이어(Service Layer)를 만들어 해당 
요청사항을 객체 지향적인 방식으로 좀 더 세분화하여 관리한다. 
3.서비스(Service) : 서비스 레이어(Service Layer)단에서 세분화된 비즈니스로직을 처리하는 객체 
4.DAO(Data Access Object) : DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 객체
5.VO(Value Object) : 각 계층간 데이터 교환을 위한 자바 객체를 의미한다. 이 객체는 데이터를 
각 레이어 간에 전달하는 목적을 가지고 있으며 객체의 속성과
getter, setter만 가지고 있다. DTO(Data Transfer Object)로 불릴 수도 있다.


update mvc_board set bName = #{1}, bTitle = #{2}, bContent = #{3} where bId = #{0}

select bId, bName, bTitle, bContent, bDate, bHit, bGroup, bStep, bIndent from mvc_board order by bGroup desc, bStep asc

INSERT INTO BOARD (MID, MWRITER, MCONTENT) VALUES (BOARD_SEQ.NEXTVAL, #{param1}, #{param2})

//model forward 관련 
http://blog.naver.com/PostView.nhn?blogId=hyss-jts&logNo=221164446212&categoryNo=13&parentCategoryNo=0


insert into board (mId, mWriter, mContent) values (board_seq.nextval, '홍길동','아하 홍길동이다.' );

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.javalec.spring_mybatis.dao.IDao">
		
	
</mapper>
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="scott" />
		<property name="password" value="tiger" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:com/javalec/spring_mybatis/dao/mapper/*.xml"></property>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>	
	
	<repositories>
		<repository>
	    	<id>oracle</id>
	    	<url>http://www.datanucleus.org/downloads/maven2/</url>
		</repository>
	</repositories>
  
  
  
  <!-- 컨넥션 풀을 위한 라이브러리 -->
		<dependency>
		    <groupId>commons-dbcp</groupId>
		    <artifactId>commons-dbcp</artifactId>
		    <version>1.4</version>
		</dependency>
	
		<!-- 오라클 JDBC 드라이버 -->
		<dependency>
		    <groupId>oracle</groupId>
		    <artifactId>ojdbc6</artifactId>
		    <version>11.2.0.3</version>
		</dependency>
	
	    <!-- my바티스 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.2.8</version>
		</dependency>
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.2.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.1.4.RELEASE</version>
		</dependency>

"insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent) values (mvc_board_seq.nextval, ?, ?, ?, 0, mvc_board_seq.currval, 0, 0 )"

create table mvc_board(
bId NUMBER(4) PRIMARY KEY,
bName VARCHAR2(20),
bTitle VARCHAR2(100),
bContent VARCHAR2(300),
bDate DATE DEFAULT SYSDATE,
bHit NUMBER(4) DEFAULT 0,
bGroup NUMBER(4),
bStep NUMBER(4),
bIndent NUMBER(4)
);

create sequence mvc_board_seq;

insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent)
VALUES (mvc_board_seq.nextval, 'abcd', 'is title', 'is content', 0 , mvc_board_seq.currval, 0, 0);
